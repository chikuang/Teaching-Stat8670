{
  "hash": "cf0a446a31ccb544d4db829802b03473",
  "result": {
    "engine": "knitr",
    "markdown": "# Appendix: Introduction to R?\n\n## R\n\nFor conducting analyses with data sets of hundreds to thousands of observations, calculating by hand is not feasible and you will need a statistical software. **R** is one of those. **R** can also be thought of as a high-level programming language. In fact, **R** is [one of the top languages](https://statisticstimes.com/tech/top-computer-languages.php) to be used by data analysts and data scientists. There are a lot of analysis packages in **R** that are currently developed and maintained by researchers around the world to deal with different data problems. Most importantly, **R** is free! In this section, we will learn how to use **R** to conduct basic statistical analyses.\n\n## IDE\n\n### Rstudio\n\nRStudio is an integrated development environment (IDE) designed specifically for working with the **R** programming language. It provides a user-friendly interface that includes a source editor, console, environment pane, and tools for plotting, debugging, version control, and package management. RStudio supports both **R** and Python and is widely used for data analysis, statistical modeling, and reproducible research. It also integrates seamlessly with tools like **R** Markdown, Shiny, and Quarto, making it popular among data scientists, statisticians, and educators.\n\n### Visual Studio Code (VS Code)\n\nVS Code is a versatile code editor that supports multiple programming languages, including **R**. With the **R** extension for VS Code, users can write and execute **R** code, access **R**'s console, and utilize features like syntax highlighting, code completion, and debugging. While not as specialized as RStudio for **R** development, VS Code offers a lightweight alternative with extensive customization options and support for various programming tasks.\n\n### Positron\n\nPositron IDE is the next-generation integrated development environment developed by Posit, the company behind RStudio. Designed to be a modern, extensible, and language-agnostic IDE, Positron builds on the strengths of RStudio while supporting a broader range of languages and workflows, including **R**, Python, and Quarto.\n\n## RStudio Layout\n\nRStudio consists of several panes: - **Source**: Where you write scripts and markdown documents. - **Console**: Where you type and execute **R** commands. - **Environment/History**: Shows your variables and command history. - **Files/Plots/Packages/Help/Viewer**: For file management, viewing plots, managing packages, accessing help, and viewing web content.\n\n## R Scripts\n\n**R** scripts are plain text files containing **R** code. You can create a new script in RStudio by clicking `File > New File > R Script`.\n\n## R Help\n\nUse `?function_name` or `help(function_name)` to access help for any **R** function. For example:\n\n``` r\n?mean\nhelp(mean)\n```\n\n## R Packages\n\n\nPackages extend **R**'s functionality. There are thousands of packages available in **R** ecosystem. You may install them from different sources.\n\n### With Comprehensive R Archive Network (CRAN)\n\nCRAN is the primary repository for **R** packages. It contains thousands of packages that can be easily installed and updated.\n\nInstall a package with:\n\n``` r\ninstall.packages(\"package_name\")\n```\n\n\n### With Bioconductor\n\nBioconductor is a repository for bioinformatics packages in **R**. It provides tools for the analysis and comprehension of high-throughput genomic data.\n\nInstall Bioconductor packages using the `BiocManager` package:\n\n``` r\nBiocManager::install(\"package_name\")\n```\n\n### From GitHub\n\nMany of the authors of **R** packages host their work on GitHub. You can install these packages using the `devtools` package:\n\n``` r\ndevtools::install_github(\"username/package_name\")\n```\n\n### Load a package \nOnce a package is installed, you need to load it into your **R** session to use its functions:\n\n``` r\nlibrary(package_name)\n```\n\nAlternatively, you may use a function in the package with `package_name::function_name()` without loading the entire package.\n\n## R Markdown\n\n**R** Markdown allows you to combine text, code, and output in a single document. Create a new **R** Markdown file in RStudio via `File > New File > R Markdown...`.\n\nRecently, the posit team has developed a new version of the **R** Markdown called quarto document, with the file extension `.qmd`. It is still under rapid development.\n\n## Vectors\n\nVectors are the most basic data structure in **R**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, 2, 3, 4, 5)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\nYou can perform operations on vectors:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  4  6  8 10\n```\n\n\n:::\n:::\n\n\n## Data Sets\n\nData frames are used for storing data tables. Create a data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(Name = c(\"Alice\", \"Bob\"), Score = c(90, 85))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Name Score\n1 Alice    90\n2   Bob    85\n```\n\n\n:::\n:::\n\n\nYou can import data from files using `read.csv()` or `read.table()`.\n\n------------------------------------------------------------------------\n\nThis appendix is adapted from [Why R?](https://tqtbui.github.io/introbook/app-rintro.html).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}