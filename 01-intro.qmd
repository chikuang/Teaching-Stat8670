# Data Structure and R Programming

Data types, operators, variables

Two basic types of objects: (1) data & (2) functions

* Data: can be a number, a vector, a matrix, a dataframe, a list or other datatypes

* Function: a function is a set of instructions that takes input, processes it, and returns output. Functions can be built-in or user-defined.

## Data type

* Boolean/Logical: Yes or No, Head or Tail, True or False

* Integers: Whole numbers $\mathbb{Z}$, e.g., 1, 2, 3, -1, -2, -3

* Characters: Text strings, e.g., "Hello", "World."

* Floats: Noninteger fractional numbers, e.g., $\pi$, $e$.

* Missing data: `NA` in R, which stands for "Not Available." It is used to represent missing or undefined values in a dataset.

```{r}
day <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
weather <- c("Raining", "Sunny", NA, "Windy", "Snowing")
data.frame(rbind(day, weather))
```

* Other more complex types


### To change data type

You may change the data type using the following functions, but the chance is that some of the information will be missing. Do this with caution!


```{r}
x <- pi
print(x)
x_int <- as.integer(x)
print(x_int)
```

Some of the conversion functions:

+ `as.integer()`: Convert to integer.
+ `as.numeric()`: Convert to numeric (float).
+ `as.character()`: Convert to character.
+ `as.logical()`: Convert to logical (boolean).
+ `as.Date()`: Convert to date.
+ `as.factor()`: Convert to factor (categorical variable).
+ `as.list()`: Convert to list.
+ `as.matrix()`: Convert to matrix.
+ `as.data.frame()`: Convert to data frame.
+ `as.vector()`: Convert to vector.
+ `as.complex()`: Convert to complex number.


## Operators 

+ Unary: With only **one** argument. E.g., `-x` (negation), `!x` (logical negation).

+ Binary: With **two** arguments. E.g., `x + y` (addition), `x - y` (subtraction), `x * y` (multiplication), `x / y` (division).

### Comparison Operator

Comparing two objects. E.g., `x == y` (equal), `x != y` (not equal), `x < y` (less than), `x > y` (greater than), `x <= y` (less than or equal to), `x >= y` (greater than or equal to).

### Logical Operator
Logical operators are used to combine or manipulate logical values (TRUE or FALSE). E.g., `x & y` (logical AND), `x | y` (logical OR), `!x` (logical NOT).

We shall note that the logical operators in R are vectorized, `x | y` and `x || y` are different. The former is vectorized, while the latter is not.

``` r 
x <- c(TRUE, FALSE, FALSE)
y <- c(TRUE, FALSE, FALSE)
x | y  # [1]  TRUE FALSE FALSE
x || y # This will return an error
```

## Indexing

Indexing is a way to access or modify specific elements in a data structure. In **R**, indexing can be done using square brackets `[]` for vectors and matrices, or the `$` operator for data frames. Note that the index starts from **0** in **R**, which is different from some other programming languages like Python.

## Naming

In **R**, you can assign names to objects using the `names()` function. This is useful for making your code more readable and for accessing specific elements in a data structure.

A good practice is to use `_` (underscore) to separate words in variable names, e.g., `my_variable`. This makes the code more readable and easier to understand.

```{r}
# Assign names to a vector
temp <- c(20, 30, 27, 31, 45)
names(temp) <- c("Mon", "Tues", "Wed", "Thurs", "Fri")
print(temp)
```

``` r
rownames(temp) <- "Day1" # error
```

```{r}
temp_mat <- matrix(c(20, 30, 27, 31, 45), nrow = 1, ncol = 5)
colnames(temp_mat) <- c("Mon", "Tues", "Wed", "Thurs", "Fri")
rownames(temp_mat) <- "Day1" # error
print(temp_mat)
```

## Array and Matrix

One may define an array or a matrix in **R** using the `array()` or `matrix()` functions, respectively. An array is a multi-dimensional data structure, while a matrix is a two-dimensional array.

```{r}
# Create a 1-dimensional array
array_1d <- array(1:10, dim = 10)
array_1d

# Create a 2-dimensional array
array_2d <- array(1:12, dim = c(4, 3))
array_2d

# Create a 3-dimensional array
array_3d <- array(1:24, dim = c(4, 3, 2))
array_3d

# Create a matrix
my_matrix <- matrix(1:12, nrow = 4, ncol = 3)
my_matrix
```

Note here, the matrix is a special case of an array, where the number of dimensions is exactly 2. 

``` r
is.matrix(array_2d)   # TRUE
is.matrix(my_matrix)  # TRUE

is.array(array_2d)    # TRUE
is.array(my_matrix)   # TRUE
```

## Key and Value Pair

Key-Value Pair is a data structure that consists of a key and its corresponding value. In **R**, this can be implemented using named vectors, lists, or data frames. Usually, the most commonly used case is in the lists and data frames. The values can be extra by providing the corresonding key

```{r}
key1 <- "Tues"
value1 <- 32
key2 <- "Wed"
value2 <- 28

list_temp <- list()
list_temp[[ key1 ]] <- value1
list_temp[[ key2 ]] <- value2

print(list_temp)

## Now providing a key - Tues
### First way
list_temp[["Tues"]]
### Second way
list_temp$Tues
```

## Data Frame
Dataframe is a two-dimensional, tabular data structure in R that can hold different types of variables (numeric, character, factor, etc.) in each column. It is similar to a spreadsheet or SQL table.

```{r}
iris <- datasets::iris
head(iris)
```

## Tidyverse 

The tidyverse is a collection of open source packages for the R programming language introduced by Hadley Wickham and his team that "share an underlying design philosophy, grammar, and data structures" of tidy data. Characteristic features of tidyverse packages include extensive use of non-standard evaluation and encouraging piping. 

``` r
## Load all tidyverse packages
library(tidyverse)

## Or load specific packages in the tidy family
library(dplyr) # Data manipulation
library(ggplot2) # Data visualization
library(readr) # Data import
library(tibble) # Tidy data frames
library(tidyr) # Data tidying
# ...
```

## Pipe

Pipe operator `|>` (native after R version 4.0) or `%>$` (from magrittr package) is a powerful tool in **R** that allows you to chain together multiple operations in a clear and concise way. It takes the output of one function and passes it as the first argument to the next function.

For example, we can write

```{r}
set.seed(777)
x <- rnorm(5)

## Without using pipe
print(round(mean(x), 2))

## Using pipe
x |> 
  mean() |> # applying the mean function
  round(2) |> #round to 2nd decimal place
  print()
```

We can see that, without using the pipe, if we are applying multiple functions to the same object, we may have hard time to track. This can make the code less readable and harder to maintain. On the other hand, using pipe, we can clearly see the sequence of operations being applied to the data, making it easier to understand and modify.

### Some rules

`|>` should **always have a space before it** and should typically **be the last thing on a line**. This simplifies adding new steps, reorganizing existing ones, and modifying elements within each step.

Note that all of the packages in the tidyverse family support the pipe operator (except `ggplot2`!), so you can use it with any of them.

------------------------------------------------------------------------

Some of the materials are adapted from [CMU Stat36-350](https://www.stat.cmu.edu/~ryantibs/statcomp/).
